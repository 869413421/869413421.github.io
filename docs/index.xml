<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>清水泥沙</title>
    <link>https://869413421.github.io/</link>
    <description>Recent content on 清水泥沙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-zh</language>
    <lastBuildDate>Thu, 02 Feb 2023 16:59:22 +0800</lastBuildDate><atom:link href="https://869413421.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>个人简历</title>
      <link>https://869413421.github.io/about/</link>
      <pubDate>Thu, 02 Feb 2023 16:59:22 +0800</pubDate>
      
      <guid>https://869413421.github.io/about/</guid>
      <description>个人信息 姓名：黄彦铭
性别：男
年龄：25
手机：13528685024
邮箱：13528685024@163.com
GitHub：github.com/869413421
学历：广州岭南职业技术学院(专科)
简介 一年.NET开发经验，两年 PHP 后端研发经验，有两年微信平台开发经验，擅长微信公众号，小程序，微信支付，商城系统，swoole，LNMP，PHP常驻内存框架，前后端分离项目，第三方接口对接开发。具备一定数据库性能调优，大流量高并发以及前端开发能力 。拥有良好的代码规范，对自己代码负责并且拥有良好的代码注释习惯， 保持代码的简洁易读。善于阅读技术官方文档，善于分享，有积极向上的学习心态。
职业技能 编程语言：PHP,C#,Go(了解)
PHP框架和拓展：laravel，Swoole，laravelS，Hyperf
测试：PHPUnit，PostMan(API功能测试)
.NET框架：.Net Core ，.Net Framework
前端：HTML，Js，JQ，Vue
前端框架：微信小程序，element-ui
关系型数据库：MySql，SQL Server
缓存&amp;amp;NoSql：Redis，memcache，MongoDb ，Elastic Search
消息中间件：RabbitMQ
运维：Linux，Docker ，Jenkins ，Nginx
管理工具：Git，Svn，Composer
工作经历 2018.04- 至今 广州市简美网络科技有限公司 岗位：
PHP开发工程师
工作描述：
负责公司微信运营项目业务开发以及产品版本迭代，参与产品需求研讨，技术选型，数据结构定型，技术难点攻克，撰写接口或技术文档，前端开发对接以及指导项目新成员实现功能模块。
2017.06 - 2018.04 上海联蔚科技有限公司 岗位：
.NET开发工程师 工作描述：
负责广汽本田官方网站及其下数据分发，流量监控系统开发以及维护
项目经验 微信运营集成系统 技术架构: ubuntu+laravels+mysql+es+redis+rabbitmq+jenkins+element
项目背景：
一套为长隆，中石化，真功夫，中信银行等大型企业提供微信公众号运营的多站点定制系统。系统集成营销推送，智能应答，微信卡券，票务，分销，粉丝社群，积分商城，微信门店，等一系列微信生态子系统。
主要职责：
负责客户各种定制模块的需求研讨，技术设计，开发。参与旧模块功能优化迭代开发。
项目成果：
使用 RabbitMQ+ElasticSearch 对微信智能应答模块进行重构，提高高峰期系统响应效率和并发能力，减少微信事件丢失，提高响应内容精准度。
使用 RabbitMQ重构异步任务代码，提高系统运行和响应效率。
使用阿里云OOS重构社群上传图片文件等功能，降低服务器资源使用成本。
使用定时任务对需要数据分析模块进行统计，实现系统数据汇总可视化。
使用swoole加ZipArchive编写数据导出服务，使系统支持海量数据快速导出。
使用注解+redis+lua脚本实现分布式锁，限流器，缓存器，应用至系统各种业务场景，提高开发效率，系统并发能力以及业务健壮性。
营销活动定制sass系统 技术架构: ubuntu+laravels+mysql+es+redis+jenkins+element</description>
    </item>
    
    <item>
      <title>面向对象的六大原则（单一职责原则）</title>
      <link>https://869413421.github.io/post/single/</link>
      <pubDate>Thu, 02 Feb 2023 14:57:24 +0800</pubDate>
      
      <guid>https://869413421.github.io/post/single/</guid>
      <description>当我们要审视判断事物的好坏时，无论如何我们都需要有一个标准。而作为一个程序员我们也需要有一个标准去判断代码结构设计的优劣。而在我们设计程序时这个标准正是面向对象的六大原则。
单一职责原则（S） 开闭原则（O） 里氏替换原则（L） 依赖倒置原则（D） 接口隔离原则（I) 合成复用原则 迪特米法则 单一职责原则 单一职责原则理解起来非常简单，一个人应该干好自己的本职工作就是遵循了单一职责原则，一个类只做属于这个类的事情也是遵循了单一职责原则。
违反单一职责原则会存在什么问题? 代码无法复用 调度混乱（不知道这个类到底是用来做什么的） 难以拓展维护 我们看一个违反单一原则的类，看看这样的设计是否也存在你的项目中
&amp;lt;phpclass OrderService{//获取数据库连接public function getConnention(){}//获取订单public function getOrder(){}//创建JSONpublic function createJson(){}//返回订单JSONpublic function responeJson(){}}?&amp;gt; 我们可以看到 OrderService这个类它完成了几种职责
获取数据库连接 获取订单号 构建订单JSON 返回JSON 当一个类需要 获取数据库连接时或者我需要构造一个JSON时，我去创建一个 OrderService显然是不合理的
这时候我们需要怎么去改进这样的设计呢？
Class DB{//获取数据库连接public function getConnention(){}}Class OrderService{private $dbpublic function __construct(DB $db){$this-&amp;gt;db = $db;}//获取订单public function getOrder(){}}Class Json{//创建订单JSONpublic function createOrderJson(){}//返回订单JSONpublic function responeJson(){}} 重构完成以后 DB类负责和数据库进行交互 OrderService类负责订单相关的逻辑 Json类负责Json的构建和响应</description>
    </item>
    
  </channel>
</rss>
